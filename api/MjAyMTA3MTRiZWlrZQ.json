{"title":"实战逆向贝壳Authorization加密算法","date":"2021-07-14T15:45:21.000Z","date_formatted":{"ll":"2021年7月14日","L":"2021/07/14","MM-DD":"07-14"},"author":"feilang235","link":"20210714beike","tags":["贝壳","贝壳加密算法","逆向爬虫"],"categories":["技术分享","逆向技术"],"updated":"2021-07-20T12:30:30.414Z","content":"<h1 id=\"目标\">目标<a title=\"#目标\" href=\"#目标\"></a></h1>\n<p>本文主要介绍了贝壳app的加密算法。</p>\n<p>贝壳版本： 2.59.0</p>\n<p>加密参数：Authorization</p>\n<p>加密算法：sha1</p>\n<p>研究成果：成果逆向获得贝壳完整的加密算法，并且用python复现了该算法。</p>\n<span id=\"more\"></span>\n<h1 id=\"抓包\">抓包<a title=\"#抓包\" href=\"#抓包\"></a></h1>\n<p>从豌豆荚下载最新版的贝壳app。目前最新版的是 2.59.0。因此就直接分析最新版了。</p>\n<p>首先抓包，为了避免信息太多就抓一个房源信息的吧。</p>\n<p><img src=\"http://blog.feilang235.com/(null)-20210714154707813.(null)\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>通过分析，我们知道了 这个 Authorization 就是加密的字段了。分析过程就不表了，这个很简单。多抓几个包，或者修改下参数对比下就行了。</p>\n<p>既然知道了加密字段，接下来，我们就用jadx 打开 app 然后分析下代码。</p>\n<h1 id=\"查看源码\">查看源码<a title=\"#查看源码\" href=\"#查看源码\"></a></h1>\n<p>用 jadx 打开 apk 代码。首先查看包名。</p>\n<p>在 AndroidManifest.xml 中可以看到包名是：com.lianjia.beike</p>\n<p><img src=\"http://blog.feilang235.com/(null)-20210714154737779.(null)\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>直接搜索关键词：Authorization 一共出来 232个。</p>\n<p><img src=\"http://blog.feilang235.com/(null)-20210714154826535.(null)\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>接下来需要分析哪个是我们需要找的加密代码段。这个部分一般是耗时比较长的。当然如果你做的足够多了也有一些技巧。我大概花了十分钟定位到了这个函数。</p>\n<p><img src=\"http://blog.feilang235.com/(null)-20210714154834954.(null)\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>点击去后查看，就是 包名是：com.bk.base.netimpl.a</p>\n<p><img src=\"http://blog.feilang235.com/(null)-20210714154846960.(null)\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>为了确认我的想法，用 frida hook 一下c 这个函数，加一个日志。</p>\n<p>Hook 代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> netimpl = Java.use(<span class=\"string\">&quot;com.bk.base.netimpl.a&quot;</span>);</span><br><span class=\"line\">netimpl.c.overload(<span class=\"string\">&#x27;java.lang.String&#x27;</span>, <span class=\"string\">&#x27;java.util.Map&#x27;</span>).implementation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a1, a2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;netimpl:&quot;</span>+a1.toString());</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"built_in\">this</span>.c(a1, a2);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Auth:&quot;</span> + res.toString());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>果然每次请求涉及到Authorization的都会调用这个方法，稳了。既然找到了加密方法，接下来就是对加密的参数进行分析了。</p>\n<h1 id=\"frida-调试代码\">Frida 调试代码<a title=\"#frida-调试代码\" href=\"#frida-调试代码\"></a></h1>\n<p>我在分析的过程中喜欢用 frida 进行调试，而且随时可以加 hook 代码。动态的谁不喜欢呢。</p>\n<p><img src=\"http://blog.feilang235.com/(null)-20210714154930878.(null)\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>Authorization 就是调用 c 这个参数生成的。如果不想分析了，只是简单调用，那就简单了。用 frida 写一个 rpc 方法。提供一个 flask api 就可以生产加密后的结果了。</p>\n<p>当然我们今天的目的还是分析算法。</p>\n<h1 id=\"算法分析\">算法分析<a title=\"#算法分析\" href=\"#算法分析\"></a></h1>\n<p>通过上面的截图可以看到 生成Authorization 的是 c 方法。实际是在 a 方法里面调用的。调用 c 有两个参数 一个是 url 另一个是 map，但是传进来的是空。所以只有一个字段。</p>\n<p>c 函数分析。</p>\n<ol>\n<li>获取所有请求的参数，然后变成一个map</li>\n<li>如果 参数2 有值，则把 参数2更新到 map 里面</li>\n<li>对 map 取entrySet 并且按照key 排序，结果是ArrayList</li>\n<li>从 JniClient 里面获取 httpAppSecret 字段</li>\n<li>继续从 JniClient 里面获取 httpAppId 字段</li>\n<li>用 httpAppSecret 和 arrayList 进行组合得到一个字符串 sb</li>\n<li>将 sb 送到  DeviceUtil.SHA1ToString 这个方法加密得到 SHA1ToString</li>\n<li>将 httpAppId和 SHA1ToString 组合并且进行  Base64.encodeToString 转换得到最后的结果。</li>\n</ol>\n<p>那么上面流程最重要的就是 4 and 5 获取了 httpAppSecret and httpAppId 加密字段。还有 DeviceUtil.SHA1ToString 这个加密算法了。</p>\n<p>首先分析 httpAppSecret 和 httpAppId 的获取。使用 frida 写一个 hook 函数，主动调用一下。很容易就获取到了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">call_jni</span>(<span class=\"params\">aa</span>) </span>&#123;</span><br><span class=\"line\">    Java.perform(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> aa = Java.use(<span class=\"string\">&quot;com.bk.base.config.a&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> context = aa.getContext()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> JniClient = Java.use(<span class=\"string\">&quot;com.homelinkndk.lib.JniClient&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> obj_enc = JniClient.$new();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> str_ret = obj_enc.GetAppSecret(context)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;GetAppSecret result: &quot;</span> + str_ret);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> str_id = obj_enc.GetAppId(context)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;GetAppId result: &quot;</span> + str_id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;sfs&quot;</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来分析 SHA1ToString 方法。方法截图如下：对应看过来就是一个 SHA-1 的加密。简单。</p>\n<p><img src=\"http://blog.feilang235.com/(null)-20210714155034366.(null)\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>最后用 python 实现下 Authorization 的加密算法逻辑。</p>\n<h1 id=\"python-实现\">Python 实现<a title=\"#python-实现\" href=\"#python-实现\"></a></h1>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">from</span> logzero <span class=\"keyword\">import</span> logger</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这里不在公网上公开了</span></span><br><span class=\"line\">http_app_secret = <span class=\"string\">&#x27;XXXXXXXXXXXX&#x27;</span></span><br><span class=\"line\">http_app_id = <span class=\"string\">&#x27;XXXXXXXX&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">str_encrypt</span>(<span class=\"params\"><span class=\"built_in\">str</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    使用sha1加密算法，返回str加密后的字符串</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    sha = hashlib.sha1(<span class=\"built_in\">str</span>)</span><br><span class=\"line\">    encrypts = sha.hexdigest()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> encrypts</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">params = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;houseCode&#x27;</span>: <span class=\"string\">&#x27;101111010102&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;cityId&#x27;</span>: <span class=\"string\">&#x27;110000&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;fb_expo_id&#x27;</span>: <span class=\"string\">&#x27;462726273153150977&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_authorization</span>(<span class=\"params\">params</span>):</span></span><br><span class=\"line\">    p_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> key, val <span class=\"keyword\">in</span> params.items():</span><br><span class=\"line\">        s_line = <span class=\"string\">&#x27;%s=%s&#x27;</span> % (key, val)</span><br><span class=\"line\">        p_list.append(s_line)</span><br><span class=\"line\">    p_list.sort()</span><br><span class=\"line\">    sb = http_app_secret + <span class=\"string\">&quot;&quot;</span>.join(p_list)</span><br><span class=\"line\">    logger.info(sb)</span><br><span class=\"line\">    instance = str_encrypt(sb.encode())</span><br><span class=\"line\">    logger.info(instance)</span><br><span class=\"line\"></span><br><span class=\"line\">    bs = http_app_id + <span class=\"string\">&quot;:&quot;</span> + instance</span><br><span class=\"line\">    logger.info(bs)</span><br><span class=\"line\"></span><br><span class=\"line\">    encoder = base64.b64encode(bs.encode(<span class=\"string\">&quot;utf-8&quot;</span>))</span><br><span class=\"line\">    logger.info(encoder)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> encoder</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;https://app.api.ke.com/house/ershoufang/detailpart1v2&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;Host&#x27;</span>: <span class=\"string\">&#x27;app.api.ke.com&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Authorization&#x27;</span>: get_authorization(params),</span><br><span class=\"line\">    <span class=\"comment\"># &#x27;x-req-id&#x27;: &#x27;c33e78e2-94d8-4c87-b09e-6cd22f3973c1&#x27;,</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;Page-Schema&#x27;</span>: <span class=\"string\">&#x27;ershou%2Fdetail&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Referer&#x27;</span>: <span class=\"string\">&#x27;community%2Fershoulist&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Cookie&#x27;</span>: <span class=\"string\">&#x27;lianjia_udid=fd6275273712c97c;lianjia_ssid=db0ad3c2-da83-4806-a726-b87c3a7be016;algo_session_id=0c935a9e-5ad2-40c3-b383-08ceff3e929c;lianjia_uuid=4f514342-8349-4596-a4df-ad6540d45db8&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Dynamic-SDK-VERSION&#x27;</span>: <span class=\"string\">&#x27;1.1.0&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Lianjia-City-Id&#x27;</span>: <span class=\"string\">&#x27;110000&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\"># &#x27;parentSceneId&#x27;: &#x27;5640895386532073216&#x27;,</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;source-global&#x27;</span>: <span class=\"string\">&#x27;&#123;&#125;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Beike2.58.0;google Pixel+3; Android 9&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\"># &#x27;Lianjia-Channel&#x27;: &#x27;Android_ke_tencentd&#x27;,</span></span><br><span class=\"line\">    <span class=\"comment\"># &#x27;Lianjia-Device-Id&#x27;: &#x27;fd6275273712c97c&#x27;,</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;Lianjia-Version&#x27;</span>: <span class=\"string\">&#x27;2.58.0&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\"># &#x27;Lianjia-Im-Version&#x27;: &#x27;2.34.0&#x27;,</span></span><br><span class=\"line\">    <span class=\"comment\"># &#x27;Lianjia-Recommend-Allowable&#x27;: &#x27;1&#x27;,</span></span><br><span class=\"line\">    <span class=\"comment\"># &#x27;Authorization&#x27;:&#x27;MjAxODAxMTFfYW5kcm9pZDo5ODkxZjQxYTA2YjVmZWRmMjU4NzI5NTMxZDUzNDZiZDkxM2NjZDEz&#x27;,</span></span><br><span class=\"line\">    <span class=\"comment\"># &#x27;extension&#x27;: &#x27;lj_duid=null&amp;ketoken=TxocRRR8gdDCVkmPzjVOxyC1kVuGFdhcKiYL7BO9nXwObhtCPKKsYdYziLCFcFDw0XluhtsgqwRrzuB5clwZTWE5REOJERbG1rQQJ8aA8AiZK1wHLb3SIBzz6OAz2zIw&amp;lj_android_id=fd6275273712c97c&amp;lj_device_id_android=fd6275273712c97c&amp;mac_id=F0:5C:77:E7:91:6B&#x27;,</span></span><br><span class=\"line\">    <span class=\"comment\"># &#x27;ip&#x27;: &#x27;182.140.153.28&#x27;,</span></span><br><span class=\"line\">    <span class=\"comment\"># &#x27;wifi_name&#x27;: &#x27;Tencent-WiFi&#x27;,</span></span><br><span class=\"line\">    <span class=\"comment\"># &#x27;lat&#x27;: &#x27;30.552499&#x27;,</span></span><br><span class=\"line\">    <span class=\"comment\"># &#x27;lng&#x27;: &#x27;104.068037&#x27;,</span></span><br><span class=\"line\">    <span class=\"comment\"># &#x27;beikeBaseData&#x27;: &#x27;%7B%22duid%22%3A%22%22%7D&#x27;,</span></span><br><span class=\"line\">    <span class=\"comment\"># &#x27;WLL-KGSA&#x27;:&#x27;LJAPPVA accessKeyId=sjoe98HI099dhdD7; nonce=PiLT6U8QIR8JAZtPbmtRDHbiUF1BEmzc; timestamp=1625123574; signature=q3pLpmpHmDiWCcOArtYFrWULD2ues5EB2bTOHhEl6/U=&#x27;,</span></span><br><span class=\"line\">    <span class=\"comment\"># &#x27;Host&#x27;:&#x27;app.api.ke.com&#x27;,</span></span><br><span class=\"line\">    <span class=\"comment\"># &#x27;Connection&#x27;:&#x27;Keep-Alive&#x27;,</span></span><br><span class=\"line\">    <span class=\"comment\"># &#x27;Accept-Encoding&#x27;:&#x27;gzip&#x27;,</span></span><br><span class=\"line\">    <span class=\"comment\"># &#x27;If-Modified-Since&#x27;: &#x27;Wed, 30 Jun 2021 13:17:18 GMT&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">r = requests.get(url, params=params, headers=headers)</span><br><span class=\"line\">logger.info(r.text)</span><br></pre></td></tr></table></figure>\n<h1 id=\"完成\">完成<a title=\"#完成\" href=\"#完成\"></a></h1>\n<h1 id=\"声明\">声明<a title=\"#声明\" href=\"#声明\"></a></h1>\n<ul>\n<li>本博客以技术交流为主，提供的内容可操作性不得用于任何商业用途和违法违规场景。</li>\n<li>本人对任何原因在使用教程中提供的策略以及技术分享可能对用户自己或他人造成的任何形式的损失和伤害不承担责任。</li>\n<li>如有侵权，请联系我进行删除。</li>\n</ul>\n","prev":{"title":"逆向美团APP探索mtgsig加密算法","link":"20210720meituan"},"next":{"title":"Mac ADB 使用指南","link":"20210714macadb"},"plink":"http://feilang235.com/20210714beike/","toc":[{"id":"目标","title":"目标","index":"1"},{"id":"抓包","title":"抓包","index":"2"},{"id":"查看源码","title":"查看源码","index":"3"},{"id":"frida-调试代码","title":"Frida 调试代码","index":"4"},{"id":"算法分析","title":"算法分析","index":"5"},{"id":"python-实现","title":"Python 实现","index":"6"},{"id":"完成","title":"完成","index":"7"},{"id":"声明","title":"声明","index":"8"}],"copyright":{"author":"feilang235","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2021年7月14日"},"reading_time":"1486 字约 10 分钟"}